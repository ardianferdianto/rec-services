// Code generated by MockGen. DO NOT EDIT.
// Source: parser.go

// Package mock_parser is a generated GoMock package.
package mock_parser

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCSVParser is a mock of CSVParser interface.
type MockCSVParser struct {
	ctrl     *gomock.Controller
	recorder *MockCSVParserMockRecorder
}

// MockCSVParserMockRecorder is the mock recorder for MockCSVParser.
type MockCSVParserMockRecorder struct {
	mock *MockCSVParser
}

// NewMockCSVParser creates a new mock instance.
func NewMockCSVParser(ctrl *gomock.Controller) *MockCSVParser {
	mock := &MockCSVParser{ctrl: ctrl}
	mock.recorder = &MockCSVParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSVParser) EXPECT() *MockCSVParserMockRecorder {
	return m.recorder
}

// ParseLine mocks base method.
func (m *MockCSVParser) ParseLine(record []string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseLine", record)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseLine indicates an expected call of ParseLine.
func (mr *MockCSVParserMockRecorder) ParseLine(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseLine", reflect.TypeOf((*MockCSVParser)(nil).ParseLine), record)
}
