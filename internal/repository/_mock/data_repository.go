// Code generated by MockGen. DO NOT EDIT.
// Source: data_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/ardianferdianto/reconciliation-service/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockDataRepository is a mock of DataRepository interface.
type MockDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDataRepositoryMockRecorder
}

// MockDataRepositoryMockRecorder is the mock recorder for MockDataRepository.
type MockDataRepositoryMockRecorder struct {
	mock *MockDataRepository
}

// NewMockDataRepository creates a new mock instance.
func NewMockDataRepository(ctrl *gomock.Controller) *MockDataRepository {
	mock := &MockDataRepository{ctrl: ctrl}
	mock.recorder = &MockDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataRepository) EXPECT() *MockDataRepositoryMockRecorder {
	return m.recorder
}

// BatchInsertBankStmts mocks base method.
func (m *MockDataRepository) BatchInsertBankStmts(ctx context.Context, stmts []domain.BankStatement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsertBankStmts", ctx, stmts)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchInsertBankStmts indicates an expected call of BatchInsertBankStmts.
func (mr *MockDataRepositoryMockRecorder) BatchInsertBankStmts(ctx, stmts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsertBankStmts", reflect.TypeOf((*MockDataRepository)(nil).BatchInsertBankStmts), ctx, stmts)
}

// BatchInsertSystemTx mocks base method.
func (m *MockDataRepository) BatchInsertSystemTx(ctx context.Context, txList []domain.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsertSystemTx", ctx, txList)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchInsertSystemTx indicates an expected call of BatchInsertSystemTx.
func (mr *MockDataRepositoryMockRecorder) BatchInsertSystemTx(ctx, txList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsertSystemTx", reflect.TypeOf((*MockDataRepository)(nil).BatchInsertSystemTx), ctx, txList)
}

// FindBankStmtsByDateRange mocks base method.
func (m *MockDataRepository) FindBankStmtsByDateRange(ctx context.Context, startDate, endDate time.Time) ([]domain.BankStatement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBankStmtsByDateRange", ctx, startDate, endDate)
	ret0, _ := ret[0].([]domain.BankStatement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBankStmtsByDateRange indicates an expected call of FindBankStmtsByDateRange.
func (mr *MockDataRepositoryMockRecorder) FindBankStmtsByDateRange(ctx, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBankStmtsByDateRange", reflect.TypeOf((*MockDataRepository)(nil).FindBankStmtsByDateRange), ctx, startDate, endDate)
}

// FindSystemTxByDateRange mocks base method.
func (m *MockDataRepository) FindSystemTxByDateRange(ctx context.Context, startDate, endDate time.Time) ([]domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSystemTxByDateRange", ctx, startDate, endDate)
	ret0, _ := ret[0].([]domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSystemTxByDateRange indicates an expected call of FindSystemTxByDateRange.
func (mr *MockDataRepositoryMockRecorder) FindSystemTxByDateRange(ctx, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSystemTxByDateRange", reflect.TypeOf((*MockDataRepository)(nil).FindSystemTxByDateRange), ctx, startDate, endDate)
}
