// Code generated by MockGen. DO NOT EDIT.
// Source: ingestion_job_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/ardianferdianto/reconciliation-service/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIngestionJobRepository is a mock of IngestionJobRepository interface.
type MockIngestionJobRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIngestionJobRepositoryMockRecorder
}

// MockIngestionJobRepositoryMockRecorder is the mock recorder for MockIngestionJobRepository.
type MockIngestionJobRepositoryMockRecorder struct {
	mock *MockIngestionJobRepository
}

// NewMockIngestionJobRepository creates a new mock instance.
func NewMockIngestionJobRepository(ctrl *gomock.Controller) *MockIngestionJobRepository {
	mock := &MockIngestionJobRepository{ctrl: ctrl}
	mock.recorder = &MockIngestionJobRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngestionJobRepository) EXPECT() *MockIngestionJobRepositoryMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockIngestionJobRepository) CreateJob(ctx context.Context, job *domain.IngestionJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockIngestionJobRepositoryMockRecorder) CreateJob(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockIngestionJobRepository)(nil).CreateJob), ctx, job)
}

// ListPendingJobs mocks base method.
func (m *MockIngestionJobRepository) ListPendingJobs(ctx context.Context, limit int) ([]domain.IngestionJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingJobs", ctx, limit)
	ret0, _ := ret[0].([]domain.IngestionJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingJobs indicates an expected call of ListPendingJobs.
func (mr *MockIngestionJobRepositoryMockRecorder) ListPendingJobs(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingJobs", reflect.TypeOf((*MockIngestionJobRepository)(nil).ListPendingJobs), ctx, limit)
}

// MarkJobInProgress mocks base method.
func (m *MockIngestionJobRepository) MarkJobInProgress(ctx context.Context, jobID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkJobInProgress", ctx, jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkJobInProgress indicates an expected call of MarkJobInProgress.
func (mr *MockIngestionJobRepositoryMockRecorder) MarkJobInProgress(ctx, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkJobInProgress", reflect.TypeOf((*MockIngestionJobRepository)(nil).MarkJobInProgress), ctx, jobID)
}

// UpdateJobProgress mocks base method.
func (m *MockIngestionJobRepository) UpdateJobProgress(ctx context.Context, jobID string, linesProcessed int64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobProgress", ctx, jobID, linesProcessed, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobProgress indicates an expected call of UpdateJobProgress.
func (mr *MockIngestionJobRepositoryMockRecorder) UpdateJobProgress(ctx, jobID, linesProcessed, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobProgress", reflect.TypeOf((*MockIngestionJobRepository)(nil).UpdateJobProgress), ctx, jobID, linesProcessed, status)
}
